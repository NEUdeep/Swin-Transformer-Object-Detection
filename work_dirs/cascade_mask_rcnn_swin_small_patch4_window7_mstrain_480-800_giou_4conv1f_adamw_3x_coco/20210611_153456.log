2021-06-11 15:34:56,735 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.6.9 (default, Nov  7 2019, 10:44:02) [GCC 8.3.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.0, V10.0.130
GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
PyTorch: 1.6.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2019.0.5 Product Build 20190808 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.5.0 (Git Hash e2ac1fac44c5078ca927cb9b90e1b3066a0b2ed0)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.2
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75
  - CuDNN 7.6.5
  - Magma 2.5.2
  - Build settings: BLAS=MKL, BUILD_TYPE=Release, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, USE_CUDA=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_STATIC_DISPATCH=OFF, 

TorchVision: 0.7.0
OpenCV: 4.2.0
MMCV: 1.2.4
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.2
MMDetection: 2.11.0+41bb93f
------------------------------------------------------------

2021-06-11 15:34:59,707 - mmdet - INFO - Distributed training: True
2021-06-11 15:35:02,754 - mmdet - INFO - Config:
model = dict(
    type='CascadeRCNN',
    pretrained=
    '/workspace/mnt/storage/kanghaidong/cloud_project/basic_files/swin_small_patch4_window7_224.pth',
    backbone=dict(
        type='SwinTransformer',
        embed_dim=96,
        depths=[2, 2, 18, 2],
        num_heads=[3, 6, 12, 24],
        window_size=7,
        mlp_ratio=4.0,
        qkv_bias=True,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.2,
        ape=False,
        patch_norm=True,
        out_indices=(0, 1, 2, 3),
        use_checkpoint=False),
    neck=dict(
        type='FPN',
        in_channels=[96, 192, 384, 768],
        out_channels=256,
        num_outs=5),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.5, 1.0, 2.0],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='CascadeRoIHead',
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='ConvFCBBoxHead',
                num_shared_convs=4,
                num_shared_fcs=1,
                in_channels=256,
                conv_out_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=80,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=False,
                reg_decoded_bbox=True,
                norm_cfg=dict(type='SyncBN', requires_grad=True),
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),
            dict(
                type='ConvFCBBoxHead',
                num_shared_convs=4,
                num_shared_fcs=1,
                in_channels=256,
                conv_out_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=80,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.05, 0.05, 0.1, 0.1]),
                reg_class_agnostic=False,
                reg_decoded_bbox=True,
                norm_cfg=dict(type='SyncBN', requires_grad=True),
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='GIoULoss', loss_weight=10.0)),
            dict(
                type='ConvFCBBoxHead',
                num_shared_convs=4,
                num_shared_fcs=1,
                in_channels=256,
                conv_out_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=80,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.033, 0.033, 0.067, 0.067]),
                reg_class_agnostic=False,
                reg_decoded_bbox=True,
                norm_cfg=dict(type='SyncBN', requires_grad=True),
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='GIoULoss', loss_weight=10.0))
        ],
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=dict(
            type='FCNMaskHead',
            num_convs=4,
            in_channels=256,
            conv_out_channels=256,
            num_classes=80,
            loss_mask=dict(
                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                match_low_quality=True,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_across_levels=False,
            nms_pre=2000,
            nms_post=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    match_low_quality=False,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_across_levels=False,
            nms_pre=1000,
            nms_post=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.05,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
data_root = '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/'
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(
        type='AutoAugment',
        policies=[[{
            'type':
            'Resize',
            'img_scale': [(480, 1333), (512, 1333), (544, 1333), (576, 1333),
                          (608, 1333), (640, 1333), (672, 1333), (704, 1333),
                          (736, 1333), (768, 1333), (800, 1333)],
            'multiscale_mode':
            'value',
            'keep_ratio':
            True
        }],
                  [{
                      'type': 'Resize',
                      'img_scale': [(400, 1333), (500, 1333), (600, 1333)],
                      'multiscale_mode': 'value',
                      'keep_ratio': True
                  }, {
                      'type': 'RandomCrop',
                      'crop_type': 'absolute_range',
                      'crop_size': (384, 600),
                      'allow_negative_crop': True
                  }, {
                      'type':
                      'Resize',
                      'img_scale': [(480, 1333), (512, 1333), (544, 1333),
                                    (576, 1333), (608, 1333), (640, 1333),
                                    (672, 1333), (704, 1333), (736, 1333),
                                    (768, 1333), (800, 1333)],
                      'multiscale_mode':
                      'value',
                      'override':
                      True,
                      'keep_ratio':
                      True
                  }]]),
    dict(
        type='Normalize',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=2,
    train=dict(
        type='CocoDataset',
        ann_file=
        '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/annotations/instances_train2017.json',
        img_prefix=
        '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/train2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(type='RandomFlip', flip_ratio=0.5),
            dict(
                type='AutoAugment',
                policies=[[{
                    'type':
                    'Resize',
                    'img_scale': [(480, 1333), (512, 1333), (544, 1333),
                                  (576, 1333), (608, 1333), (640, 1333),
                                  (672, 1333), (704, 1333), (736, 1333),
                                  (768, 1333), (800, 1333)],
                    'multiscale_mode':
                    'value',
                    'keep_ratio':
                    True
                }],
                          [{
                              'type': 'Resize',
                              'img_scale': [(400, 1333), (500, 1333),
                                            (600, 1333)],
                              'multiscale_mode': 'value',
                              'keep_ratio': True
                          }, {
                              'type': 'RandomCrop',
                              'crop_type': 'absolute_range',
                              'crop_size': (384, 600),
                              'allow_negative_crop': True
                          }, {
                              'type':
                              'Resize',
                              'img_scale': [(480, 1333), (512, 1333),
                                            (544, 1333), (576, 1333),
                                            (608, 1333), (640, 1333),
                                            (672, 1333), (704, 1333),
                                            (736, 1333), (768, 1333),
                                            (800, 1333)],
                              'multiscale_mode':
                              'value',
                              'override':
                              True,
                              'keep_ratio':
                              True
                          }]]),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        ann_file=
        '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/annotations/instances_val2017.json',
        img_prefix=
        '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        ann_file=
        '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/annotations/instances_val2017.json',
        img_prefix=
        '/workspace/mnt/storage/kanghaidong/khdwork/work_data/detection_data/public-data/coco/val2017/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(metric=['bbox', 'segm'])
optimizer = dict(
    type='AdamW',
    lr=0.0001,
    betas=(0.9, 0.999),
    weight_decay=0.05,
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0.0),
            relative_position_bias_table=dict(decay_mult=0.0),
            norm=dict(decay_mult=0.0))))
optimizer_config = dict(
    grad_clip=None,
    type='DistOptimizerHook',
    update_interval=1,
    coalesce=True,
    bucket_size_mb=-1,
    use_fp16=True)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.001,
    step=[27, 33])
runner = dict(type='EpochBasedRunnerAmp', max_epochs=36)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TensorboardLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = None
resume_from = None
workflow = [('train', 1)]
fp16 = None
work_dir = './work_dirs/cascade_mask_rcnn_swin_small_patch4_window7_mstrain_480-800_giou_4conv1f_adamw_3x_coco'
gpu_ids = range(0, 8)

2021-06-11 15:35:03,800 - mmdet - INFO - load model from: /workspace/mnt/storage/kanghaidong/cloud_project/basic_files/swin_small_patch4_window7_224.pth
2021-06-11 15:35:04,518 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: norm.weight, norm.bias, head.weight, head.bias, layers.0.blocks.1.attn_mask, layers.1.blocks.1.attn_mask, layers.2.blocks.1.attn_mask, layers.2.blocks.3.attn_mask, layers.2.blocks.5.attn_mask, layers.2.blocks.7.attn_mask, layers.2.blocks.9.attn_mask, layers.2.blocks.11.attn_mask, layers.2.blocks.13.attn_mask, layers.2.blocks.15.attn_mask, layers.2.blocks.17.attn_mask

missing keys in source state_dict: norm0.weight, norm0.bias, norm1.weight, norm1.bias, norm2.weight, norm2.bias, norm3.weight, norm3.bias

2021-06-11 15:35:27,166 - mmdet - INFO - Start running, host: root@training-job-605aaf43bf46a9bf61ecb72e-c9rtf, work_dir: /workspace/mnt/storage/kanghaidong/transformer/Swin-Transformer-Object-Detection/work_dirs/cascade_mask_rcnn_swin_small_patch4_window7_mstrain_480-800_giou_4conv1f_adamw_3x_coco
2021-06-11 15:35:27,166 - mmdet - INFO - workflow: [('train', 1)], max: 36 epochs
2021-06-11 18:50:35,448 - mmdet - INFO - Saving checkpoint at 1 epochs
2021-06-11 18:52:50,979 - mmdet - INFO - Evaluating bbox...
2021-06-11 18:53:29,746 - mmdet - INFO - Evaluating segm...
2021-06-11 22:09:43,575 - mmdet - INFO - Saving checkpoint at 2 epochs
2021-06-11 22:11:48,295 - mmdet - INFO - Evaluating bbox...
2021-06-11 22:12:24,490 - mmdet - INFO - Evaluating segm...
2021-06-12 01:29:06,037 - mmdet - INFO - Saving checkpoint at 3 epochs
2021-06-12 01:31:15,155 - mmdet - INFO - Evaluating bbox...
2021-06-12 01:31:50,755 - mmdet - INFO - Evaluating segm...
2021-06-12 04:48:40,737 - mmdet - INFO - Saving checkpoint at 4 epochs
2021-06-12 04:50:50,627 - mmdet - INFO - Evaluating bbox...
2021-06-12 04:51:28,115 - mmdet - INFO - Evaluating segm...
2021-06-12 08:08:13,327 - mmdet - INFO - Saving checkpoint at 5 epochs
2021-06-12 08:10:23,190 - mmdet - INFO - Evaluating bbox...
2021-06-12 08:10:59,562 - mmdet - INFO - Evaluating segm...
2021-06-12 11:27:14,551 - mmdet - INFO - Saving checkpoint at 6 epochs
2021-06-12 11:29:21,003 - mmdet - INFO - Evaluating bbox...
2021-06-12 11:29:58,636 - mmdet - INFO - Evaluating segm...
2021-06-12 14:46:37,559 - mmdet - INFO - Saving checkpoint at 7 epochs
2021-06-12 14:48:47,465 - mmdet - INFO - Evaluating bbox...
2021-06-12 14:49:23,447 - mmdet - INFO - Evaluating segm...
2021-06-12 18:05:44,071 - mmdet - INFO - Saving checkpoint at 8 epochs
2021-06-12 18:07:52,113 - mmdet - INFO - Evaluating bbox...
2021-06-12 18:08:28,828 - mmdet - INFO - Evaluating segm...
2021-06-12 21:24:55,473 - mmdet - INFO - Saving checkpoint at 9 epochs
2021-06-12 21:27:03,867 - mmdet - INFO - Evaluating bbox...
2021-06-12 21:27:40,048 - mmdet - INFO - Evaluating segm...
2021-06-13 00:44:14,212 - mmdet - INFO - Saving checkpoint at 10 epochs
2021-06-13 00:46:25,123 - mmdet - INFO - Evaluating bbox...
2021-06-13 00:47:02,096 - mmdet - INFO - Evaluating segm...
2021-06-13 04:03:25,909 - mmdet - INFO - Saving checkpoint at 11 epochs
2021-06-13 04:05:38,421 - mmdet - INFO - Evaluating bbox...
2021-06-13 04:06:15,956 - mmdet - INFO - Evaluating segm...
2021-06-13 07:23:06,887 - mmdet - INFO - Saving checkpoint at 12 epochs
2021-06-13 07:25:19,389 - mmdet - INFO - Evaluating bbox...
2021-06-13 07:25:58,278 - mmdet - INFO - Evaluating segm...
2021-06-13 10:42:04,315 - mmdet - INFO - Saving checkpoint at 13 epochs
2021-06-13 10:44:12,973 - mmdet - INFO - Evaluating bbox...
2021-06-13 10:44:48,847 - mmdet - INFO - Evaluating segm...
2021-06-13 14:00:57,656 - mmdet - INFO - Saving checkpoint at 14 epochs
2021-06-13 14:03:08,596 - mmdet - INFO - Evaluating bbox...
2021-06-13 14:03:45,418 - mmdet - INFO - Evaluating segm...
2021-06-13 17:20:18,559 - mmdet - INFO - Saving checkpoint at 15 epochs
2021-06-13 17:22:26,755 - mmdet - INFO - Evaluating bbox...
2021-06-13 17:23:00,494 - mmdet - INFO - Evaluating segm...
2021-06-13 20:39:48,332 - mmdet - INFO - Saving checkpoint at 16 epochs
2021-06-13 20:41:54,281 - mmdet - INFO - Evaluating bbox...
2021-06-13 20:42:31,421 - mmdet - INFO - Evaluating segm...
2021-06-13 23:59:22,270 - mmdet - INFO - Saving checkpoint at 17 epochs
2021-06-14 00:01:39,481 - mmdet - INFO - Evaluating bbox...
2021-06-14 00:02:20,334 - mmdet - INFO - Evaluating segm...
2021-06-14 03:19:16,951 - mmdet - INFO - Saving checkpoint at 18 epochs
2021-06-14 03:21:30,001 - mmdet - INFO - Evaluating bbox...
2021-06-14 03:22:07,244 - mmdet - INFO - Evaluating segm...
2021-06-14 06:39:13,818 - mmdet - INFO - Saving checkpoint at 19 epochs
2021-06-14 06:41:28,947 - mmdet - INFO - Evaluating bbox...
2021-06-14 06:42:08,916 - mmdet - INFO - Evaluating segm...
2021-06-14 09:59:13,114 - mmdet - INFO - Saving checkpoint at 20 epochs
2021-06-14 10:01:27,508 - mmdet - INFO - Evaluating bbox...
2021-06-14 10:02:06,369 - mmdet - INFO - Evaluating segm...
2021-06-14 13:19:05,814 - mmdet - INFO - Saving checkpoint at 21 epochs
2021-06-14 13:21:25,797 - mmdet - INFO - Evaluating bbox...
2021-06-14 13:22:01,181 - mmdet - INFO - Evaluating segm...
2021-06-14 16:38:50,565 - mmdet - INFO - Saving checkpoint at 22 epochs
2021-06-14 16:41:02,353 - mmdet - INFO - Evaluating bbox...
2021-06-14 16:41:38,185 - mmdet - INFO - Evaluating segm...
2021-06-14 19:57:53,679 - mmdet - INFO - Saving checkpoint at 23 epochs
2021-06-14 20:00:03,055 - mmdet - INFO - Evaluating bbox...
2021-06-14 20:00:43,923 - mmdet - INFO - Evaluating segm...
2021-06-14 23:16:55,627 - mmdet - INFO - Saving checkpoint at 24 epochs
2021-06-14 23:19:04,275 - mmdet - INFO - Evaluating bbox...
2021-06-14 23:19:41,116 - mmdet - INFO - Evaluating segm...
2021-06-15 02:36:00,603 - mmdet - INFO - Saving checkpoint at 25 epochs
2021-06-15 02:38:04,695 - mmdet - INFO - Evaluating bbox...
2021-06-15 02:38:40,617 - mmdet - INFO - Evaluating segm...
2021-06-15 05:54:17,640 - mmdet - INFO - Saving checkpoint at 26 epochs
2021-06-15 05:56:22,951 - mmdet - INFO - Evaluating bbox...
2021-06-15 05:56:56,136 - mmdet - INFO - Evaluating segm...
2021-06-15 09:12:54,716 - mmdet - INFO - Saving checkpoint at 27 epochs
2021-06-15 09:15:01,885 - mmdet - INFO - Evaluating bbox...
2021-06-15 09:15:39,438 - mmdet - INFO - Evaluating segm...
